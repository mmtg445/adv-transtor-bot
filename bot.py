import os
import logging
import telebot
import pymongo
from googletrans import Translator
from flask import Flask

# ‚úÖ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
API_ID = int(os.getenv("API_ID", "26649585"))
API_HASH = os.getenv("API_HASH", "588a3ea6fd01ae88bd2e10fed7d55b2c")
BOT_TOKEN = os.getenv("BOT_TOKEN", "8013290263:AAGc0aJ-lnUgI-0R2L7S3QSTSXH_d9Sj6sE")
MONGO_URI = os.getenv("MONGO_URI", "mongodb+srv://rohanahamed75:gt4RXJZ1mUtOh4Xv@mmtg.0ong5.mongodb.net/?retryWrites=true&w=majority&appName=mmtg)
DEFAULT_LANG = "en"

# ‚úÖ MongoDB ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó
client = pymongo.MongoClient(MONGO_URI)
db = client["translator_bot"]
users_collection = db["users"]

# ‚úÖ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
bot = telebot.TeleBot(BOT_TOKEN)
translator = Translator()

# ‚úÖ Flask API ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï
app = Flask(__name__)

@app.route('/health')
def health_check():
    return {"status": "running"}, 200

# ‚úÖ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def get_user_language(user_id):
    user = users_collection.find_one({"user_id": user_id})
    return user["language"] if user else DEFAULT_LANG

def set_user_language(user_id, language):
    users_collection.update_one({"user_id": user_id}, {"$set": {"language": language}}, upsert=True)

# ‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def translate_text(text, target_lang):
    try:
        translated = translator.translate(text, dest=target_lang)
        return translated.text
    except Exception as e:
        logging.error(f"Translation Error: {e}")
        return "‚ö†Ô∏è ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"

# ‚úÖ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ
@bot.message_handler(commands=['language'])
def choose_language(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["English", "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "Espa√±ol", "Fran√ßais", "Deutsch"]
    for btn in buttons:
        markup.add(telebot.types.KeyboardButton(btn))
    bot.send_message(message.chat.id, "üåç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["English", "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "Espa√±ol", "Fran√ßais", "Deutsch"])
def set_language(message):
    lang_map = {"English": "en", "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ": "bn", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": "hi", "Espa√±ol": "es", "Fran√ßais": "fr", "Deutsch": "de"}
    user_id = message.from_user.id
    set_user_language(user_id, lang_map[message.text])
    bot.send_message(message.chat.id, f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {message.text}")

# ‚úÖ ‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶‡¶ï ‡¶¨‡¶ü‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨!\n\nüîß ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá /language ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

@bot.message_handler(func=lambda message: True)
def translate(message):
    user_id = message.from_user.id
    user_lang = get_user_language(user_id)
    translated_text = translate_text(message.text, user_lang)
    bot.reply_to(message, f"üìù ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶: {translated_text}")

# ‚úÖ Flask ‡¶ì ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    from threading import Thread
    Thread(target=lambda: app.run(port=5000)).start()
    bot.polling()
